@model string

<div class="jumbotron">
    @if (User?.Identity?.IsAuthenticated ?? false)
    {
        <h1>Welcome, @User.Identity.Name</h1>

        <p>
            @foreach (var claim in Context.User.Claims)
            {
                <div>@claim.Type: <b>@claim.Value</b></div>
            }
        </p>

        if (!string.IsNullOrEmpty(Model))
        {
            <h3>Message received from the resource controller: @Model</h3>
        }

        <form action="~/" method="post">
            <button class="btn btn-lg btn-warning" type="submit">Query the resource controller</button>
        </form>

        <a class="btn btn-lg btn-danger" href="/signout">Sign out</a>
    }

    else
    {
        <h1>Welcome, anonymous</h1>
        <a class="btn btn-lg btn-success" href="/signin">Sign in</a>
    }
</div>

    <h1>Get JWT token &amp; refresh token from OpenIddict</h1>
    <p><strong>For an angular login page, <a href="/login">click here</a>.</strong></p>
    <div>
        <label>username</label>
        <input id="username" value="user@test.com" />
    </div>
    <div>
        <label>password</label>
        <input id="password" value="P2ssw0rd!" />
    </div>
    <br />
    <div>
        <button id="buttonToken">Get Token</button>
        <button id="buttonAPI">Get API Data</button>
    </div>
    <h4>API Response</h4>
    <pre style="max-width:100%;white-space: normal;overflow-wrap:break-word;" id="apiresponse"></pre>
    <h4>Token Response</h4>
    <pre style="max-width:100%;white-space: normal;overflow-wrap:break-word;" id="response"></pre>
    <h4>Decoded Access Token</h4>
    <pre style="max-width:100%;white-space: normal;overflow-wrap:break-word;" id="token"></pre>
@section scripts{
    <script>
        var baseUrl = window.location.protocol + "//" + window.location.host + "/";

        document.getElementById("buttonToken").addEventListener("click", getToken, false);
        document.getElementById("buttonAPI").addEventListener("click", getAPI, false);

        function getAPI() {
            document.getElementById("apiresponse").innerText = "loading...";

            var xhr = new XMLHttpRequest();
            xhr.onload = function (e) {
                document.getElementById("apiresponse").innerText = xhr.status + ": " + xhr.response;
            }

            xhr.open("GET", baseUrl + "api/test");

            var data = document.getElementById("response").innerText;
            document.getElementById("apiresponse").innerText = "loading...";
            if (data !== "") {
                var response = JSON.parse(data);
                xhr.setRequestHeader("Authorization", "Bearer " + response.access_token);
            }
            xhr.send();
        }

        function getToken() {
            var uid = document.getElementById("username").value;
            var pwd = document.getElementById("password").value;

            document.getElementById("response").innerText = "loading...";
            document.getElementById("token").innerText = "loading...";
            document.getElementById("apiresponse").innerText = "";

            var xhr = new XMLHttpRequest();
            xhr.onload = function (e) {

                document.getElementById("response").innerText = xhr.response === "" ? "Failed" : xhr.response;
                var decodedToken = xhr.response === "" ? "" : decodeToken(JSON.parse(xhr.response).access_token);
                document.getElementById("token").innerText = decodedToken === "" ? "" : JSON.stringify(decodedToken);

            }

            xhr.open("POST", baseUrl + "connect/token");
            var data = {
                username: uid,
                password: pwd,
                grant_type: "password",
                // specify the resource, to match the audience in the jwt bearer middleware
                resource: "http://localhost:58292/",
                // offline_access: indicate refresh token is required
                // profile: include custom fields
                // email: include email address
                scope: "offline_access profile email roles"
            };
            var body = "";
            for (var key in data) {
                if (body.length) {
                    body += "&";
                }
                body += key + "=";
                body += encodeURIComponent(data[key]);
            }
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.send(body);
        }

        function decodeToken(token) {
          //  alert(token);
            var parts = token.split('.');
            alert(parts.length);
            if (parts.length !== 3) {
                throw new Error('JWT must have 3 parts');
            }

            var decoded = urlBase64Decode(parts[1]);
            if (!decoded) {
                throw new Error('Cannot decode the token');
            }

            return JSON.parse(decoded);
        }

        function urlBase64Decode(str) {
            var output = str.replace('-', '+').replace('_', '/');
            switch (output.length % 4) {
                case 0: { break; }
                case 2: { output += '=='; break; }
                case 3: { output += '='; break; }
                default: {
                    throw 'Illegal base64url string!';
                }
            }
            return window.atob(output); //polifyll https://github.com/davidchambers/Base64.js
        }

    </script>
    }